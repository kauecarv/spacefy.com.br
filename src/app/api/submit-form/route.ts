import { NextResponse } from 'next/server'

const WEBHOOK_URL = "https://discord.com/api/webhooks/1320509296424783954/0Hwrd7jLHfsYU-GmNJtS795rGpUxB7xLNo8E_dbny1y35drqw500BG6-kfqm_XeOxTj3"

export async function POST(request: Request) {
  try {
    const formData = await request.json()
    const formType = formData.from || 'site'

    const commonFields = [
      {
        name: "üë§ Informa√ß√µes do Cliente",
        value: [
          `**Nome:** ${formData.nome}`,
          `**Telefone:** ${formData.telefone}`,
          `**Email:** ${formData.email}`
        ].join('\n'),
        inline: false
      }
    ]

    let specificFields: Array<{
      name: string;
      value: string;
      inline: boolean;
    }> = []
    let title = ""
    let footerText = ""

    switch (formType) {
      case 'sistemas':
        title = "üöÄ [SISTEMA] Nova solicita√ß√£o de desenvolvimento"
        footerText = "Spacefy - Formul√°rio de Sistemas"
        specificFields = [
          {
            name: "üìù Necessidades e Objetivos",
            value: [
              `**Necessidades:** ${formData.necessidades || "N√£o informado"}`,
              `**Objetivo:** ${formData.objetivo || "N√£o informado"}`,
              `**Tecnologia:** ${formData.tecnologia || "N√£o informado"}`
            ].join('\n'),
            inline: false
          },
          {
            name: "‚öôÔ∏è Requisitos T√©cnicos",
            value: [
              `**Banco de Dados:** ${formData.bancoDados || "N√£o informado"}`,
              `**Integra√ß√µes:** ${formData.integracao || "N√£o informado"}`,
              `**Usu√°rios:** ${formData.usuarios || "N√£o informado"}`
            ].join('\n'),
            inline: false
          }
        ]
        break

      case 'sites':
        title = "üåê [SITE] Nova solicita√ß√£o de website"
        footerText = "Spacefy - Formul√°rio de Sites"
        specificFields = [
          {
            name: "üìù Detalhes do Site",
            value: [
              `**P√°ginas:** ${formData.paginas || "N√£o informado"}`,
              `**Se√ß√µes:** ${formData.secoes || "N√£o informado"}`,
              `**Infraestrutura:** ${formData.infraestrutura === 'sim' ? 'Possui' : 'N√£o possui'}`
            ].join('\n'),
            inline: false
          }
        ]
        break

      case 'modelos':
        title = "üé® [MODELO] Nova solicita√ß√£o de template"
        footerText = "Spacefy - Formul√°rio de Modelos"
        specificFields = [
          {
            name: "üìù Detalhes do Modelo",
            value: [
              `**Descri√ß√£o:** ${formData.descricao || "N√£o informado"}`,
              `**P√°ginas:** ${formData.paginas || "N√£o informado"}`,
              `**Se√ß√µes:** ${formData.secoes || "N√£o informado"}`,
              `**Refer√™ncia:** ${formData.referencia === 'sim' ? 'Sim' : 'N√£o'}`,
              `**Link de Refer√™ncia:** ${formData.referenciaLink || "N√£o informado"}`,
              `**Conte√∫do:** ${formData.conteudo || "N√£o informado"}`
            ].join('\n'),
            inline: false
          }
        ]
        break

      case 'prototipos':
        title = "‚ú® [PROT√ìTIPO] Nova solicita√ß√£o de design"
        footerText = "Spacefy - Formul√°rio de Prot√≥tipos"
        specificFields = [
          {
            name: "üìù Detalhes do Prot√≥tipo",
            value: [
              `**Objetivo:** ${formData.objetivo || "N√£o informado"}`,
              `**Refer√™ncia:** ${formData.referencia === 'sim' ? 'Sim' : 'N√£o'}`,
              `**Link de Refer√™ncia:** ${formData.referenciaLink || "N√£o informado"}`,
              `**Dispositivos:** ${formData.dispositivos === 'sim' ? 'Responsivo' : 'Vers√£o √∫nica'}`
            ].join('\n'),
            inline: false
          }
        ]
        break
    }

    const timeAndBudget = {
      name: "‚è±Ô∏è Prazo e Investimento",
      value: [
        `**Prazo:** ${formData.prazo || "N√£o informado"}`,
        `**Investimento:** ${formData.investimento || "N√£o informado"}`
      ].join('\n'),
      inline: false
    }

    const discordResponse = await fetch(WEBHOOK_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        content: "@everyone",
        embeds: [{
          title,
          description: "Um novo lead acabou de preencher o formul√°rio!",
          color: 0x4F46E8,
          fields: [...commonFields, ...specificFields, timeAndBudget],
          timestamp: new Date().toISOString(),
          footer: {
            text: footerText
          }
        }]
      })
    })

    if (!discordResponse.ok) {
      return NextResponse.json(
        { success: false },
        { status: 500 }
      )
    }

    return NextResponse.json({ success: true })

  } catch (error) {
    console.error('Erro:', error)
    return NextResponse.json(
      { success: false },
      { status: 500 }
    )
  }
} 